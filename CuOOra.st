Object subclass: #CuOOra	instanceVariableNames: 'users topics'	classVariableNames: ''	package: 'CuOOra-model'!!CuOOra commentStamp: '' prior: 0!.!!CuOOra methodsFor: 'initialization' stamp: 'Anonymous 4/13/2021 06:42'!initialize	topics:= OrderedCollection new.	users:= OrderedCollection new.	self initializeState.! !!CuOOra methodsFor: 'find' stamp: 'Anonymous 4/13/2021 04:09'!findTopics: aCollection	"los topicos de la coleccion por parametro son los que se ingresan, tengo que ver si efectivamente estan en topicos"	^topics select: [ :each | aCollection includes: each name asUppercase ]! !!CuOOra methodsFor: 'adding' stamp: 'Anonymous 4/13/2021 01:27'!addUser: aUser	users add: aUser.	^ aUser.	! !!CuOOra methodsFor: 'adding' stamp: 'Anonymous 4/13/2021 01:26'!addTopic: aTopic	topics add: aTopic.	^ aTopic.	! !!CuOOra methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 11:09'!users	^ users! !!CuOOra methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 11:09'!topics	^ topics! !!CuOOra methodsFor: 'accessing' stamp: 'Anonymous 4/13/2021 02:21'!clamp: aValue min: aMin max: aMax	((aValue > aMin) & (aValue < aMax))		ifTrue: [ ^ aValue ].	(aValue <= aMin)		ifTrue: [ ^ aMin ].	(aValue >= aMax)		ifTrue: [ ^ aMax ].! !!CuOOra methodsFor: 'accessing'!loginWithUsername: anUsername password: aPassword	^ users		detect: [ :each | each username = anUsername & (each password = aPassword) ]		ifNone: [ nil ]! !!CuOOra methodsFor: 'private' stamp: 'Anonymous 4/16/2021 02:19'!initializeState	| u1 u2 u3 q1 q2 t1 t2 t3 a1 a2 lt|		" CREACION DE USERS "	u1 := User newWithUsername: 'pedro@cuoora.com' password: 'pedro@cuoora.com'.	u2 := User newWithUsername: 'diego@cuoora.com' password: 'diego@cuoora.com'.	u3 := User newWithUsername: 'juan@cuoora.com' password: 'juan@cuoora.com'.		" SEGUIMIENTO DE USERS "	u1 follow: u3.	u3 follow: u2.		" CREACION DE TOPICS "	t1 := Topic newWithName: 'OO1' description: 'OO1'.	t2 := Topic newWithName: 'Test de unidad' description: 'Test de unidad'.	t3 := Topic newWithName: 'Smalltalk' description: 'Smalltalk'.			" CREACION DE QUESTIONS "		lt := OrderedCollection new.	lt add: t1.	lt add: t2.		q1 := Question 				newWithAuthor: u1 				title: '¿Para qué sirve el método SetUp?' 				text: '¿Para qué sirve el método SetUp?'				topics:  lt.		lt := OrderedCollection new.	lt add: t1.	lt add: t3.				q2 := Question 				newWithAuthor: u2 				title: '¿Qué significa #messageNotUnderstood?' 				text: '¿Qué significa #messageNotUnderstood?'				topics:  lt.			" CREACION DE ANSWERS "		a1 := Answer 				newWithAuthor: u2				question: q1				text: 'Sirve para instanciar los objetos que sonevaluados por el test en un único método y que se ejecutesiempre antes de cada test'.	a2 := Answer 				newWithAuthor: u1				question: q2				text: 'Significa que el objeto que recibió el mensajeno encontró ningún método para ejecutar en respuesta'.		" REFERENCIAS USERS -> TOPICS "		"u1 addInterestTopic: t1.	u1 addInterestTopic: t2.		u2 addInterestTopic: t1.	u2 addInterestTopic: t3."			" REFERENCIAS USERS -> QUESTIONS "		u1 addQuestion: q1.	u2 addQuestion: q2.			" REFERENCIAS USERS -> ANSWERS "		u2 addAnswer: a1.	u1 addAnswer: a2.		" REFERENCIAS USERS -> ANSWERS "		q1 addAnswer: a1.	q2 addAnswer: a2.		self users add: u1.	self users add: u2.	self users add: u3.		self topics add: t1.	self topics add: t2.	self topics add: t3.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CuOOra class	instanceVariableNames: 'uniqueInstance'!!CuOOra class methodsFor: 'instance creation' stamp: 'Anonymous 3/31/2021 11:37'!uniqueInstance	uniqueInstance ifNil: [ uniqueInstance := self new ].	^ uniqueInstance.! !!CuOOra class methodsFor: 'instance creation' stamp: 'Anonymous 3/31/2021 11:42'!clearUniqueInstance	uniqueInstance := nil.! !Object subclass: #Post	instanceVariableNames: 'text createAt author qualifications'	classVariableNames: ''	package: 'CuOOra-model'!!Post methodsFor: 'adding'!addQualification: aQualification	qualifications add: aQualification.	^ aQualification.! !!Post methodsFor: 'instance creation'!initializeWithAuthor: anUser text: aText	author := anUser.	text := aText.	! !!Post methodsFor: 'initialization' stamp: 'Anonymous 4/10/2021 03:53'!initialize	createAt := DateAndTime now.	qualifications := OrderedCollection new.! !!Post methodsFor: 'accessing'!getDislikes	^(qualifications reject: [ :each | each condition]) size.! !!Post methodsFor: 'accessing' stamp: 'Casco 4/5/2020 11:58'!text	^ text! !!Post methodsFor: 'accessing' stamp: 'Anonymous 3/30/2021 09:51'!qualifications	^ qualifications! !!Post methodsFor: 'accessing' stamp: 'Anonymous 3/30/2021 09:51'!createAt	^ createAt! !!Post methodsFor: 'accessing' stamp: 'Casco 4/5/2020 11:58'!text: anObject	text := anObject! !!Post methodsFor: 'accessing'!isQualifiedBy: anUser	| qTemp |	qTemp :=	qualifications detect: [ :q | q author = anUser ] ifNone: [ qTemp := nil ].	^ qTemp.			! !!Post methodsFor: 'accessing'!getLikes	^(qualifications select: [ :each | each condition ]) size.! !!Post methodsFor: 'accessing'!determineScore	^(self getLikes - self getDislikes).! !!Post methodsFor: 'accessing' stamp: 'Anonymous 3/30/2021 09:51'!author	^ author! !!Post methodsFor: 'removing'!removeQualification: qualification	qualifications remove: qualification.	! !!Post methodsFor: 'removing' stamp: 'Anonymous 3/31/2021 12:34'!remove	self subclassResponsibility.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Post class	instanceVariableNames: ''!!Post class methodsFor: 'instance creation'!newWithAuthor: anUser text: aText	^self new initializeWithAuthor: anUser text: aText.! !Post subclass: #Answer	instanceVariableNames: 'question'	classVariableNames: ''	package: 'CuOOra-model'!!Answer commentStamp: '' prior: 0!.!!Answer methodsFor: 'instance creation' stamp: 'Anonymous 4/1/2021 02:40'!initializeWithAuthor: anUser question: aQuestion text: aText	self initializeWithAuthor: anUser text: aText.	question:=aQuestion.! !!Answer methodsFor: 'removing' stamp: 'Anonymous 4/13/2021 06:36'!remove	author removeAnswer: self.	question removeAnswer: self.		! !!Answer methodsFor: 'accessing'!question	^question.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Answer class	instanceVariableNames: ''!!Answer class methodsFor: 'instance creation'!newWithAuthor: anUser question: aQuestion text: aText	^ self new initializeWithAuthor: anUser question: aQuestion  text: aText.! !Object subclass: #Qualification	instanceVariableNames: 'condition createAt author'	classVariableNames: ''	package: 'CuOOra-model'!!Qualification methodsFor: 'instance creation'!initializeWithCondition: aCondition author: anAuthor	condition := aCondition.	author := anAuthor.	! !!Qualification methodsFor: 'accessing' stamp: 'Anonymous 4/14/2021 07:44'!toggleCondition	"Metodo para alternar la condicion. Funcionalidad cambiar de like a dislike o viceversa."	condition := condition not.	createAt := DateAndTime now.	^ condition.! !!Qualification methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 10:49'!condition	^ condition! !!Qualification methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 10:49'!createAt	^ createAt! !!Qualification methodsFor: 'accessing' stamp: 'Anonymous 3/31/2021 10:49'!author	^ author! !!Qualification methodsFor: 'initialization' stamp: 'Anonymous 3/31/2021 10:51'!initialize	createAt := DateAndTime now.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Qualification class	instanceVariableNames: ''!!Qualification class methodsFor: 'instance creation'!newWithCondition: aCondition author: anAuthor	^ self new initializeWithCondition: aCondition author: anAuthor.! !Post subclass: #Question	instanceVariableNames: 'title topics answers'	classVariableNames: ''	package: 'CuOOra-model'!!Question commentStamp: '' prior: 0!.!!Question methodsFor: 'initialization'!initialize	super initialize.	topics := OrderedCollection new.	answers := OrderedCollection new.! !!Question methodsFor: 'adding'!addAnswer: answer	answers add: answer.	^answer.! !!Question methodsFor: 'accessing'!title 	^title.! !!Question methodsFor: 'accessing'!topics	^topics.! !!Question methodsFor: 'accessing'!title: aTitle	title:=aTitle.! !!Question methodsFor: 'accessing' stamp: 'Anonymous 4/14/2021 09:33'!answersSorted	 ^ answers sort: [ :a1 :a2 | a1 determineScore > a2 determineScore ].! !!Question methodsFor: 'accessing'!answers 	^answers.! !!Question methodsFor: 'instance creation' stamp: 'Anonymous 4/16/2021 02:22'!initializeWithAuthor: anUser title: aTitle text: aText topics: aTopics	self initializeWithAuthor: anUser text: aTitle.	title := aTitle.	topics:= aTopics.	topics do: [ :each | each addQuestion: self ].! !!Question methodsFor: 'private'!removeQuestionFromTopic	topics do: [:each|each removeQuestion:self].! !!Question methodsFor: 'private' stamp: 'Anonymous 4/13/2021 06:41'!removeUserAnswers	| lst |	lst := OrderedCollection newFrom: answers.	lst do: [ :each | each remove ].! !!Question methodsFor: 'removing' stamp: 'Anonymous 4/13/2021 06:06'!remove 	 	self removeQuestionFromTopic.	self removeUserAnswers.	author removeQuestion: self.		! !!Question methodsFor: 'removing' stamp: 'Anonymous 4/13/2021 04:19'!removeAnswer: anAnswer	answers remove: anAnswer.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Question class	instanceVariableNames: ''!!Question class methodsFor: 'instance creation'!newWithAuthor: anUser title: aTitle text: aText topics: aTopics	^self new initializeWithAuthor: anUser title: aTitle text: aText topics: aTopics.! !Object subclass: #Topic	instanceVariableNames: 'name description questions'	classVariableNames: ''	package: 'CuOOra-model'!!Topic methodsFor: 'accessing'!description 		^description.! !!Topic methodsFor: 'accessing'!questions 		^questions.! !!Topic methodsFor: 'accessing'!name	^name.! !!Topic methodsFor: 'removing'!removeQuestion: aQuestion	questions remove: aQuestion.	^ aQuestion.! !!Topic methodsFor: 'initialization'!initialize	questions := OrderedCollection new.! !!Topic methodsFor: 'initialization'!initializeWithName:aName description:aDescription	name:=aName.	description:=aDescription.! !!Topic methodsFor: 'adding'!addQuestion: question 	questions add: question.	^question.			! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topic class	instanceVariableNames: ''!!Topic class methodsFor: 'instance creation'!newWithName: aName description: aDescription	^self new initializeWithName: aName description: aDescription.	 ! !Object subclass: #User	instanceVariableNames: 'username password answers questions createAt following interestTopics'	classVariableNames: ''	package: 'CuOOra-model'!!User methodsFor: 'initialization' stamp: 'Anonymous 4/9/2021 15:45'!initialize	createAt := DateAndTime now.	following := OrderedCollection new.	answers := OrderedCollection new.	questions := OrderedCollection new.	interestTopics := OrderedCollection new.! !!User methodsFor: 'private'!questionsScore	^ (questions size * 20)	! !!User methodsFor: 'private'!answersScore	^(answers select: [ :each | each question author ~= self ]) size * 50.! !!User methodsFor: 'accessing' stamp: 'Anonymous 3/30/2021 09:04'!username	^ username! !!User methodsFor: 'accessing' stamp: 'Casco 4/4/2020 21:23'!password	^ password! !!User methodsFor: 'accessing'!getRelevantQuestions	| relevantQuestions |	relevantQuestions := OrderedCollection new.	interestTopics do: [ :topic | relevantQuestions addAll: topic questions ].	following do: [ :user | relevantQuestions addAll: user questions ].	^ relevantQuestions removeDuplicates.! !!User methodsFor: 'accessing' stamp: 'Anonymous 3/30/2021 09:08'!following	^ following! !!User methodsFor: 'accessing' stamp: 'Anonymous 3/30/2021 09:21'!followingAt: user	^ following includes: user.! !!User methodsFor: 'accessing' stamp: 'Anonymous 3/30/2021 08:59'!createAt	^ createAt! !!User methodsFor: 'accessing' stamp: 'Casco 4/4/2020 21:23'!password: anObject	password := anObject! !!User methodsFor: 'accessing'!determineScore	^(self questionsScore + self answersScore)			+ (questions sumNumbers: [ :q | q determineScore ]) 		+ (answers sumNumbers: [ :a | a determineScore ]).! !!User methodsFor: 'accessing' stamp: 'Anonymous 3/30/2021 09:08'!answers	^ answers! !!User methodsFor: 'accessing' stamp: 'Anonymous 4/11/2021 23:52'!unfollow: user	(self followingAt: user)		ifFalse: [ ^ self ].	following remove: user.	^ user.! !!User methodsFor: 'accessing' stamp: 'Anonymous 3/30/2021 09:08'!questions	^ questions! !!User methodsFor: 'accessing' stamp: 'Anonymous 3/30/2021 09:08'!interestTopics	^ interestTopics! !!User methodsFor: 'instance creation'!initializeWithUsername: anUsername password: aPassword	username := anUsername.	password := aPassword.			! !!User methodsFor: 'adding' stamp: 'Anonymous 3/30/2021 09:19'!addAnswer: answer	answers add: answer.	^ answer.! !!User methodsFor: 'adding' stamp: 'Anonymous 3/30/2021 09:19'!follow: user	following add: user.	^ user.! !!User methodsFor: 'adding' stamp: 'Anonymous 3/30/2021 09:19'!addInterestTopic: topic	interestTopics add: topic.	^ topic.! !!User methodsFor: 'adding' stamp: 'Anonymous 4/13/2021 04:36'!addQuestion: question	questions add: question.	^ question.! !!User methodsFor: 'removing'!removeAnswer: anAnswer	answers remove: anAnswer.	^ anAnswer.! !!User methodsFor: 'removing' stamp: 'Anonymous 4/13/2021 04:21'!removeQuestion: aQuestion	questions remove: aQuestion.	^ aQuestion.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!User class	instanceVariableNames: ''!!User class methodsFor: 'instance creation'!newWithUsername: anUsername password: aPassword	^self new initializeWithUsername: anUsername password: aPassword.! !TestCase subclass: #AnswerTest	instanceVariableNames: 'u1 q1 a1'	classVariableNames: ''	package: 'CuOOra-tests'!!AnswerTest methodsFor: 'tests'!testRemove	u1 addAnswer: a1.	q1 addAnswer: a1.	self assert: (u1 answers at: 1) equals: a1.	self assert: (q1 answers at: 1) equals: a1.	a1 remove.	self assert: u1 answers isEmpty.	self assert: q1 answers isEmpty.	! !!AnswerTest methodsFor: 'running' stamp: 'Anonymous 4/13/2021 04:41'!setUp	u1 := User newWithUsername: 'SuperUsuario' password: '1234'.	q1 := Question newWithAuthor: u1 title: 'SuperPregunta'  text: 'SuperTexto de SuperPregunta'  topics: OrderedCollection new.	a1 := Answer newWithAuthor: u1 question: q1 text: 'SuperTexto de SuperRespuesta de SuperPregunta'.	! !TestCase subclass: #CuOOraTest	instanceVariableNames: 't1 t2 t3'	classVariableNames: ''	package: 'CuOOra-tests'!!CuOOraTest methodsFor: 'running' stamp: 'Anonymous 4/13/2021 01:49'!setUp	CuOOra clearUniqueInstance.	t1 := Topic newWithName: 'Cocina' description: 'SuperCocina'.	! !!CuOOraTest methodsFor: 'tests' stamp: 'Anonymous 4/14/2021 08:47'!testFindTopics	| lTopics |	lTopics := OrderedCollection new.	lTopics add: 'COCINA'.	CuOOra uniqueInstance addTopic: t1.	self assert: ((CuOOra uniqueInstance findTopics: lTopics) at: 1) equals: t1.	CuOOra clearUniqueInstance.	! !TestCase subclass: #PostTest	instanceVariableNames: 'p1 p2 qa1 qa2 qa3 u1 u2 u3'	classVariableNames: ''	package: 'CuOOra-tests'!!PostTest methodsFor: 'running'!setUp	p1 := Post newWithAuthor: nil text: 'Super Publicacion'.	qa1 := Qualification newWithCondition: true author: u1.	qa2 := Qualification newWithCondition: true author: u2.	qa3 := Qualification newWithCondition: false author: nil.! !!PostTest methodsFor: 'tests'!testGetDislikes	p1 addQualification: qa1.	p1 addQualification: qa2.	p1 addQualification: qa3.	self assert: p1 getDislikes equals: 1.	! !!PostTest methodsFor: 'tests'!testAddQualification	self assert: p1 qualifications isEmpty.	self assert: (p1 addQualification: qa1) equals: qa1.	self assert: (p1 addQualification: qa2) equals: qa2.	self deny: p1 qualifications isEmpty.	self assert: p1 qualifications size equals: 2.	! !!PostTest methodsFor: 'tests'!testGetLikes	p1 addQualification: qa1.	p1 addQualification: qa2.	p1 addQualification: qa3.	self assert: p1 getLikes equals: 2.	! !!PostTest methodsFor: 'tests'!testIsQualifiedBy	p1 addQualification: qa1.	p1 addQualification: qa2.	p1 addQualification: qa3.	self assert: (p1 isQualifiedBy: u1) notNil.	self assert: (p1 isQualifiedBy: u1) author equals: u1.	self assert: (p1 isQualifiedBy: u2) notNil.	self assert: (p1 isQualifiedBy: u2) author equals: u2.	self assert: (p1 isQualifiedBy: u3) author isNil.! !!PostTest methodsFor: 'tests'!testDetermineScore	p1 addQualification: qa1.	p1 addQualification: qa2.	p1 addQualification: qa3.	self assert: p1 determineScore equals: 1.	! !TestCase subclass: #QualificationTest	instanceVariableNames: 'q1'	classVariableNames: ''	package: 'CuOOra-tests'!!QualificationTest methodsFor: 'running'!setUp	q1 := Qualification newWithCondition: true author: nil.! !!QualificationTest methodsFor: 'tests'!testToggleCondition	self assert: q1 condition.	self assert: q1 toggleCondition equals: false.	self assert: q1 toggleCondition equals: true.! !TestCase subclass: #QuestionTest	instanceVariableNames: 'topic1 answer1 answer2 question1 user1 user2 user3'	classVariableNames: ''	package: 'CuOOra-tests'!!QuestionTest methodsFor: 'tests' stamp: 'Anonymous 4/13/2021 06:39'!testRemove	user1 addQuestion: question1.		question1 addAnswer: answer1.	question1 addAnswer: answer2.		user2 addAnswer: answer1.	user3 addAnswer: answer2.		question1 remove.		self assert: question1 answers isEmpty.	self assert: topic1 questions isEmpty.	self assert: user1 questions isEmpty.	! !!QuestionTest methodsFor: 'tests'!testAddAnswer	self assert: question1 answers isEmpty.	question1 addAnswer: answer1.	self deny: question1 answers isEmpty.! !!QuestionTest methodsFor: 'tests' stamp: 'Anonymous 4/14/2021 09:35'!testAnswersSorted	answer1 addQualification: (Qualification newWithCondition: true author: nil).	answer1 addQualification: (Qualification newWithCondition: false author: nil).	answer1 addQualification: (Qualification newWithCondition: false author: nil).		answer2 addQualification: (Qualification newWithCondition: false author: nil).	answer2 addQualification: (Qualification newWithCondition: false author: nil).	answer2 addQualification: (Qualification newWithCondition: false author: nil).		question1 addAnswer: answer1.	question1 addAnswer: answer2.		self assert: answer1 determineScore equals: -1.	self assert: answer2 determineScore equals: -3.	self assert: (question1 answersSorted first) equals: answer1.	! !!QuestionTest methodsFor: 'tests'!testTopics	self deny: question1 topics isEmpty.	self assert: question1 topics size equals:1.! !!QuestionTest methodsFor: 'running' stamp: 'Anonymous 4/14/2021 09:36'!setUp	| topics1 |		topic1:= (Topic newWithName: 'Cocina' description: 'Consulte aqui sobre cocina').		topics1 := OrderedCollection new.	topics1 add: topic1.		user1 := (User newWithUsername: 'andres00' password: '123456').	user2 := (User newWithUsername: 'mario9' password: '1234567').	user3 := (User newWithUsername: 'lara12' password: '123432').		question1 := (Question		newWithAuthor: user1		title: 'Temperatura del horno'		text:			'Quisiera saber ¿a que temperatura tiene que estar el horno para cocinar una torta de chocolate?'		topics: topics1).			answer1:= (Answer newWithAuthor: user2 question: question1 text: 'Debe estar precalentado por 10 minutos a 180º.'). 		answer2:= (Answer newWithAuthor: user3 question: question1 text: 'Lo podes precalentar antes a 180º o podes dejar el fuego bajo hasta que se cocina.').						! !TestCase subclass: #TopicTest	instanceVariableNames: 't1 q1 q2'	classVariableNames: ''	package: 'CuOOra-tests'!!TopicTest methodsFor: 'running' stamp: 'Anonymous 4/13/2021 04:49'!setUp	| ls |	t1 := Topic newWithName: 'Cocina' description: 'Preguntas sobre cocina en general'.	ls := OrderedCollection new.	ls add: t1.	q1 := Question newWithAuthor: nil title: 'Su mejor receta de yakisoba?' text: 'necesito que me den sus recetas y tips para preparar el plato' topics: ls.	q2 := Question newWithAuthor: nil title: 'Su mejor receta de pizzas?' text: 'necesito que me den sus recetas y tips para preparar el plato' topics: ls.! !!TopicTest methodsFor: 'running' stamp: 'Anonymous 4/13/2021 04:47'!testAddQuestion	self deny: t1 questions isEmpty.	self assert: (t1 questions last) equals: q2.	self assert: t1 questions size equals: 2.	self assert: (t1 questions last) equals: q2.! !!TopicTest methodsFor: 'tests' stamp: 'Anonymous 4/13/2021 04:47'!testRemoveQuestion	self assert: (t1 removeQuestion: q1) equals: q1.	self assert: t1 questions size equals: 1.	self assert: t1 questions last equals: q2.! !TestCase subclass: #UserTest	instanceVariableNames: 'u1 u2 u3 q1 q2 q3 q4 q5 a1 a2 a3 a4 t1 t2 t3 lt qa1 qa2 qa3 qa4'	classVariableNames: ''	package: 'CuOOra-tests'!!UserTest methodsFor: 'running'!setUp		u1 := User newWithUsername: 'user1' password: '1234'.	u2 := User newWithUsername: 'user2' password: '1234'.	u3 := User newWithUsername: 'user3' password: '1234'.		t1 := Topic newWithName: 'Mecanina' description: 'Consulte aqui sobre mecanica'.	t2 := Topic newWithName: 'Electricidad' description: 'Consulte aqui sobre electricidad'.	t3 := Topic newWithName: 'Reparacion PC' description: 'Consulte aqui sobre computadoras'.		lt := OrderedCollection new.	lt add: t1.		q1 := Question newWithAuthor: u1 title: 'Problema homocinetica'  text: 'tengo un problema en la homocinetica: hace cla cla cli cli xdd' topics: lt.		lt := OrderedCollection new.	lt add: t2.		q2 := Question newWithAuthor: u2 title: 'Problema con la luz'  text: 'tengo un problema en la casa' topics: lt.		a1 := Answer newWithAuthor: u1 question: q1  text: 'Flaco te tenes que arrepentir'.	a2 := Answer newWithAuthor: u1 question: q2  text: 'Flaco no me podes decir eso'.	a3 := Answer newWithAuthor: u1 question: q2  text: 'Vos te tenes que arrepentir.'.	a4 := Answer newWithAuthor: u3 question: q2  text: 'Vos te tenes que arrepentir.'.		lt := OrderedCollection new.	lt add: t3.			q3 := Question newWithAuthor: u3 title: 'Problema de video'  text: 'tengo un problema con la tarjeta grafica.' topics: lt.		lt := OrderedCollection new.	lt add: t3.			q4 := Question newWithAuthor: u3 title: 'Problema con el audio'  text: 'tengo un problema con el audio en linux' topics: lt.		lt := OrderedCollection new.	lt add: t3.				q5 := Question newWithAuthor: u3 title: 'Como listar inodos en linux?'  text: 'necesito listar los inodos en linux' topics: lt.		qa1 := Qualification newWithCondition: true author: u3.	qa2 := Qualification newWithCondition: true author: u3.	qa3 := Qualification newWithCondition: true author: u3.	qa4 := Qualification newWithCondition: false author: u3.! !!UserTest methodsFor: 'tests'!testAddAnswer	self assert: u1 answers isEmpty.	self assert: (u1 addAnswer: a1) equals: a1.	self deny: u1 answers isEmpty.! !!UserTest methodsFor: 'tests'!testFollowingAt	u1 follow: u2.	self assert: (u1 followingAt: u2).	! !!UserTest methodsFor: 'tests'!testDetermineScore	q3 addQualification: qa1.	q3 addQualification: qa2.	q3 addQualification: qa3.	q3 addQualification: qa4.	u3 addQuestion: q3.	u3 addQuestion: q4.	u3 addQuestion: q5.	q2 addAnswer: a4.	u3 addAnswer: a4.	self assert: u3 determineScore equals: 112.! !!UserTest methodsFor: 'tests'!testRemoveAnswer	u1 addAnswer: a1.	self assert: (u1 removeAnswer: a1) equals: a1.	self assert: u1 answers isEmpty.	! !!UserTest methodsFor: 'tests'!testAddInterestTopic	self assert: u1 interestTopics isEmpty.	self assert: (u1 addInterestTopic: t1) equals: t1.	self deny: u1 interestTopics isEmpty.! !!UserTest methodsFor: 'tests'!testAddQuestion	self assert: u1 questions isEmpty.	self assert: (u1 addQuestion: q1) equals: q1.	self deny: u1 questions isEmpty.! !!UserTest methodsFor: 'tests'!testAnswersScore	self assert: u1 answersScore equals: 0.	u1 addAnswer: a1.	u1 addAnswer: a2.	u1 addAnswer: a3.	self assert: u1 answersScore equals: 100.! !!UserTest methodsFor: 'tests'!testQuestionsScore	self assert: u1 questionsScore equals: 0.	u1 addQuestion: q1.	u1 addQuestion: q2.	self assert: u1 questionsScore equals: 40.! !!UserTest methodsFor: 'tests'!testGetRelevantQuestions	u1 addQuestion: q1.	u2 addQuestion: q2.	u3 addQuestion: q3.	u3 addQuestion: q4.	u3 addQuestion: q5.	t2 addQuestion: q2.	u1 addInterestTopic: t2.	u1 follow: u3.	self assert: u1 getRelevantQuestions size equals: 4.	! !!UserTest methodsFor: 'tests'!testFollow	self assert: u1 following isEmpty.	self assert: (u1 follow: u2) equals: u2.	self assert: u1 following size equals: 1.	self assert: u1 following first equals: u2.! !WAFileLibrary subclass: #MyFileLibrary	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-resources'!!MyFileLibrary methodsFor: 'uploaded' stamp: 'Anonymous 4/14/2021 21:50'!stylesCss	^ 'body {
    padding: 0px 70px 0px 70px;
    background-color: #000;
}
a {
    text-decoration: none;
    color: inherit;
}
h1, h2, h3, a {
    color: #fff;
}

a:hover {
    text-decoration: underline;
}
/*###########################*/
/*##### HEADER SECTION ######*/
/*###########################*/
.header-container {
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-bottom: 1px solid #D2D4D4;
    margin-bottom: 30px;
}
.header-title {
    color: #FA1440;
    font-size: 32px;
}
.header-title:hover {
    text-decoration: none;
}
.header-right-content {
    font-size: 18px;
}
.header-right-content > span {
    margin-right: 15px;
}
.header-right-content .btn-logout {
    background-color: #FA1440;
    padding: 10px 20px 10px 20px;
    color: #fff;
    border-radius: 5px;
    transition-duration: 0.4s;
}
.header-right-content .btn-logout:hover {
    background-color: rgba(250, 20, 64, 0.5);
}
/*###########################*/
/*### NEW QUESTION POST ###*/
/*###########################*/
.btn-new-post {
    position: fixed;
    width: 60px;
    height: 60px;
    bottom: 40px;
    right: 60px;
    background-color: #FA1440;
    color: #FFF;
    font-size: 35px;
    border-radius: 50px;
    text-align: center;
    box-shadow: 2px 2px 3px #999;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition-duration: 0.4s;
    border: 1px solid #fff;
}
.btn-new-post:hover {
    background-color: rgba(250, 20, 64, 0.5);
}
/*###########################*/
/*###### BACK BUTTON ########*/
/*###########################*/
.btn-back-button {
    padding: 10px;
    background-color: #F7C920;
    color: #FFF;
    border-radius: 5px;
    margin-top: 10px;
}
/*###########################*/
/*###### FOLLOW BUTTON ######*/
/*###########################*/
.btn-follow-unfollow {
    padding: 10px;
    color: #FFF;
    border-radius: 5px;
    margin-top: 10px;
}
/*###########################*/
/*## LIKE/DISLIKE BUTTON ####*/
/*###########################*/
.btn-lk-dlk {
    width: 50px;
    padding: 5px;
    color: #FFF;
    background-color: #007bff;
    border-radius: 5px;
    margin-right: 12px;
    cursor: pointer;
    border: none;
    outline: none;
}
/*###########################*/
/*###### BODY CONTAINER #####*/
/*###########################*/
.body-container {
    text-align: center;
}
/*###########################*/
/*##### POSTS CONTAINER #####*/
/*###########################*/
.posts-container {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
}

/*###########################*/
/*##### POST CONTAINER ######*/
/*###########################*/
.post-container {
    flex: 50%;
    text-align: center;
    padding: 20px;
    max-width: 40%;
    background-color: #FA1440;
    border-radius: 10px;
    box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.2);
    margin-top: 30px;
    margin-bottom: 30px;
    color: #fff;
}
/*###########################*/
/*##### FORM CONTAINER ######*/
/*###########################*/

.wrapper{
    position: absolute;
    top: 53%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    max-width: 550px;
    background: rgba(0,0,0,0.8);
    padding: 30px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
}

.new-question-form{
    display: flex;
    align-content: center;
}
.new-question-form > form {
    width: 100%;
}
.input-fields{
    display: flex;
    flex-direction: column;
    margin-right: 4%;
}
  
.input-fields .input,.msg textarea{
    margin: 10px 0;
    background: #000;
    border: 0px;
    border-bottom: 2px solid rgba(217, 0, 36, 0.8);
    padding: 10px;
    color: #FFF;
    width: 100%;
}
.msg{
    margin-right: 4%;
}
.msg textarea{
    height: 212px;
    resize: none;
}

.btn-accept {
    background: #FA1440;
    text-align: center;
    padding: 15px;
    border-radius: 5px;
    color: #fff;
    cursor: pointer;
    text-transform: uppercase;
    border: none;
    outline: none;
    width: 100%;
}

@media screen and (max-width: 600px){
  .new-question-form{
    flex-direction: column;
  }
  .msg textarea{
    height: 80px;
  }
  .input-fields,
  .msg{
    width: 100%;
  }
}'! !WAComponent subclass: #ComponentWithHeader	instanceVariableNames: 'parent'	classVariableNames: ''	package: 'CuOOra-ui'!!ComponentWithHeader methodsFor: 'initialization' stamp: 'Anonymous 4/15/2021 19:29'!initialize	super initialize.	parent := self.! !!ComponentWithHeader methodsFor: 'updating' stamp: 'Anonymous 4/15/2021 21:25'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.   anHtmlRoot stylesheet url: (MyFileLibrary urlOf: #stylesCss).! !!ComponentWithHeader methodsFor: 'protected' stamp: 'Anonymous 4/15/2021 20:00'!renderUserProfileComponent	parent call: (UserProfileComponent user: self session user parent: self).! !!ComponentWithHeader methodsFor: 'protected' stamp: 'Anonymous 4/15/2021 19:16'!renderHeaderOn: aCanvas	aCanvas div class: 'header-container'; with: [ 		aCanvas			div class: 'header-left-content'; with: [ self renderHeaderTitleOn: aCanvas ].		aCanvas			div class: 'header-right-content'; with: [ self renderHeaderMenuOn: aCanvas ].	].	! !!ComponentWithHeader methodsFor: 'protected' stamp: 'Anonymous 4/14/2021 06:33'!renderHeaderTitleOn: aCanvas	aCanvas		anchor style: 'text-decoration: none';			callback: [ self renderHomeComponent ];			with: [ aCanvas heading level1 class: 'header-title'; with: 'CuOOra' ].! !!ComponentWithHeader methodsFor: 'protected' stamp: 'Anonymous 4/14/2021 05:06'!renderHeaderMenuOn: aCanvas	aCanvas anchor style: 'margin-right: 15px';		callback: [ self renderUserProfileComponent ];		with: self session user username.		aCanvas anchor class: 'btn-logout';		callback: [ self logout ];		with: [ aCanvas span: 'Logout' ].! !!ComponentWithHeader methodsFor: 'protected' stamp: 'Anonymous 4/13/2021 03:23'!renderHomeComponent	parent call: HomeComponent new.! !!ComponentWithHeader methodsFor: 'protected' stamp: 'Anonymous 4/12/2021 02:58'!logout	self session logout.	self call: LoginComponent new.! !ComponentWithHeader subclass: #ComponentWithHeaderAndBack	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-ui'!!ComponentWithHeaderAndBack methodsFor: 'protected' stamp: 'Anonymous 4/15/2021 20:18'!back	self answer.! !!ComponentWithHeaderAndBack methodsFor: 'protected' stamp: 'Anonymous 4/15/2021 19:49'!renderBackButtonOn: aCanvas	aCanvas anchor class: 'btn-back-button';		callback: [ self back ];		with: 'Regresar'.! !!ComponentWithHeaderAndBack methodsFor: 'protected' stamp: 'Anonymous 4/15/2021 19:57'!parent: aParent	parent := aParent.! !ComponentWithHeader subclass: #HomeComponent	instanceVariableNames: 'latestQuestions'	classVariableNames: ''	package: 'CuOOra-ui'!!HomeComponent commentStamp: 'Anonymous 4/14/2021 10:15' prior: 0!application := WAAdmin register: LoginComponent asApplicationAt: 'cuoora'.application sessionClass: SessionWithUser.CuOOra clearUniqueInstance.!!HomeComponent methodsFor: 'initialization' stamp: 'Anonymous 4/15/2021 20:10'!initialize	| max |	super initialize.	max := self session user getRelevantQuestions size.	latestQuestions := (self session user getRelevantQuestions) first: (CuOOra uniqueInstance clamp: 5 min: 0 max: max).	latestQuestions sort: [ :q1 :q2 | q1 createAt > q2 createAt ].! !!HomeComponent methodsFor: 'private'!model	^ CuOOra uniqueInstance.! !!HomeComponent methodsFor: 'private' stamp: 'Anonymous 4/15/2021 21:08'!renderContentOn: aCanvas	self renderHeaderOn: aCanvas.	aCanvas div class: 'body-container'; with: [		aCanvas 			heading level1 with: 'Ultimas Preguntas'.		aCanvas div class: 'posts-container'; with: [ 			self renderLatestQuestionsOn: aCanvas.		].		self renderNewQuestionButtonOn: aCanvas.	].! !!HomeComponent methodsFor: 'private' stamp: 'Anonymous 4/15/2021 21:08'!renderLatestQuestionsOn: aCanvas	latestQuestions do: [ :q | aCanvas render: (QuestionComponent question: q parent: self canRemove: false) ].							! !!HomeComponent methodsFor: 'private' stamp: 'Anonymous 4/14/2021 09:45'!renderNewQuestionButtonOn: aCanvas	aCanvas anchor class: 'btn-new-post'; style: 'text-decoration: none';		callback: [ self createNewQuestion ];		with: '+'.	! !!HomeComponent methodsFor: 'private' stamp: 'Anonymous 4/15/2021 20:49'!createNewQuestion	self call: (NewQuestionComponent parent: self).! !WAComponent subclass: #LoginComponent	instanceVariableNames: 'username password'	classVariableNames: ''	package: 'CuOOra-ui'!!LoginComponent commentStamp: 'Anonymous 4/16/2021 01:59' prior: 0!application := WAAdmin register: LoginComponent asApplicationAt: 'cuoora'.application sessionClass: SessionWithUser.CuOOra clearUniqueInstance.!!LoginComponent methodsFor: 'private'!model	^ CuOOra uniqueInstance.! !!LoginComponent methodsFor: 'private' stamp: 'Anonymous 4/14/2021 06:29'!renderSignInButtonOn: aCanvas	aCanvas submitButton class: 'btn-accept';		callback: [ self login ];		with: 'Sign In'! !!LoginComponent methodsFor: 'private' stamp: 'Anonymous 4/12/2021 20:16'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.   anHtmlRoot stylesheet url: (MyFileLibrary urlOf: #stylesCss).! !!LoginComponent methodsFor: 'private' stamp: 'Anonymous 4/14/2021 06:25'!renderButtonsOn: aCanvas	self renderSignInButtonOn: aCanvas.! !!LoginComponent methodsFor: 'private' stamp: 'Anonymous 4/14/2021 06:53'!renderInputElementsOn: aCanvas	aCanvas div class: 'input-fields'; with: [		aCanvas textInput class: 'input'; on: #username of: self; placeholder: 'Nombre de usuario'.		aCanvas passwordInput class: 'input'; on: #password of: self; placeholder: 'Contraseña'.	].! !!LoginComponent methodsFor: 'private'!proceedWith: aUser	self session user: aUser.	self call: HomeComponent new.! !!LoginComponent methodsFor: 'private'!username	^ username! !!LoginComponent methodsFor: 'private' stamp: 'Anonymous 4/14/2021 06:27'!renderContentOn: aCanvas	aCanvas		div: [ self renderHeaderOn: aCanvas ].			aCanvas div class: 'wrapper'; style: 'top: 30%; text-align: center'; with: [		aCanvas heading level2 with: 'Iniciar Sesion'.		aCanvas div class: 'new-question-form'; with: [ 			aCanvas				form: [ self renderInputElementsOn: aCanvas.				self renderButtonsOn: aCanvas ].		].	].! !!LoginComponent methodsFor: 'private'!password: anObject	password := anObject! !!LoginComponent methodsFor: 'private' stamp: 'Anonymous 4/12/2021 21:49'!renderHeaderOn: aCanvas	aCanvas		heading level1 class: 'header-title'; with: 'CuOOra'.! !!LoginComponent methodsFor: 'private'!username: anObject	username := anObject! !!LoginComponent methodsFor: 'private'!login	(self model loginWithUsername: username password: password)		ifNotNil: [ :it | self proceedWith: it ].	username := nil.	password := nil! !!LoginComponent methodsFor: 'private'!password	^ password! !ComponentWithHeaderAndBack subclass: #NewAnswerComponent	instanceVariableNames: 'question answer nqText'	classVariableNames: ''	package: 'CuOOra-ui'!!NewAnswerComponent methodsFor: 'instance creation' stamp: 'Anonymous 4/15/2021 20:21'!question: aQuestion parent: aParent	self parent: aParent.	question := aQuestion.! !!NewAnswerComponent methodsFor: 'private' stamp: 'Anonymous 4/11/2021 20:50'!cancel	self answer.! !!NewAnswerComponent methodsFor: 'private' stamp: 'Anonymous 4/15/2021 21:24'!renderNewAnswerForm: aCanvas		aCanvas div style: 'background: rgba(0,0,0,0.8); padding: 30px; border-radius: 5px; box-shadow: 0 0 10px rgba(0,0,0,0.3);'; with: [		aCanvas div class: 'msg'; with: [  			(aCanvas textArea style: 'height: 100px'; on: #nqText of: self) placeholder: 'Escriba aqui el contenido'.		].			aCanvas button class: 'btn-accept'; style: 'width: 200px';			callback: [ self accept ];			with: 'Aceptar'.	].		! !!NewAnswerComponent methodsFor: 'private' stamp: 'Anonymous 4/15/2021 21:24'!renderContentOn: aCanvas	self renderHeaderOn: aCanvas.	self renderBackButtonOn: aCanvas.	aCanvas render: (QuestionComponent question: question parent: self canRemove: false).	aCanvas horizontalRule.	aCanvas heading level2 with: 'Agregar respuesta'.	aCanvas form: [ self renderNewAnswerForm: aCanvas ].! !!NewAnswerComponent methodsFor: 'private' stamp: 'Anonymous 4/11/2021 20:40'!nqText	^ nqText! !!NewAnswerComponent methodsFor: 'private' stamp: 'Anonymous 4/11/2021 20:40'!nqText: anObject	nqText := anObject! !!NewAnswerComponent methodsFor: 'private' stamp: 'Anonymous 4/11/2021 20:59'!accept	nqText isEmpty		ifTrue: [ ^ self ].	answer := Answer newWithAuthor: self session user question: question text: nqText.	"ver de automatizar las ligaduras"	self session user addAnswer: answer.	question addAnswer: answer.	self answer.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NewAnswerComponent class	instanceVariableNames: ''!!NewAnswerComponent class methodsFor: 'services' stamp: 'Anonymous 4/15/2021 20:22'!question: aQuestion parent: aParent	self initialize.	^ (self new question: aQuestion parent: aParent).! !ComponentWithHeaderAndBack subclass: #NewQuestionComponent	instanceVariableNames: 'question nqTitle nqText nqTopics'	classVariableNames: ''	package: 'CuOOra-ui'!!NewQuestionComponent methodsFor: 'private' stamp: 'Anonymous 4/14/2021 04:36'!model	^ CuOOra uniqueInstance.! !!NewQuestionComponent methodsFor: 'private'!nqText: anObject	nqText := anObject! !!NewQuestionComponent methodsFor: 'private'!nqTitle: anObject	nqTitle := anObject! !!NewQuestionComponent methodsFor: 'private'!nqTopics	^ nqTopics! !!NewQuestionComponent methodsFor: 'private' stamp: 'Anonymous 4/14/2021 05:44'!renderAcceptButtonOn: aCanvas	aCanvas button class: 'btn-accept';		callback: [ self accept ];		with: 'Aceptar'! !!NewQuestionComponent methodsFor: 'private' stamp: 'Anonymous 4/14/2021 04:09'!renderButtonsOn: aCanvas 	self renderAcceptButtonOn: aCanvas.! !!NewQuestionComponent methodsFor: 'private' stamp: 'Anonymous 4/14/2021 09:39'!accept	nqTitle isNotEmpty & nqText isNotEmpty		& (self topics: nqTopics) isNotEmpty		ifFalse: [ ^ self ].	question := Question newWithAuthor: self session user title: nqTitle text: nqText topics: (self topics: nqTopics).	self session user addQuestion: question.	self call: HomeComponent new.! !!NewQuestionComponent methodsFor: 'private' stamp: 'Anonymous 4/14/2021 04:52'!renderInputElementsOn: aCanvas	aCanvas div class: 'input-fields'; with: [		(aCanvas textInput class: 'input'; on: #nqTitle of: self) 			placeholder: 'Escriba aqui el titulo de su pregunta'.		(aCanvas textInput class: 'input'; on: #nqTopics of: self) 			placeholder: 'Topicos: ', (', ' join: (self model topics collect: [:t | t name])).	].	aCanvas div class: 'msg'; with: [		(aCanvas textArea on: #nqText of: self) placeholder: 'Escriba aqui el desarrollo de su pregunta'.	].! !!NewQuestionComponent methodsFor: 'private' stamp: 'Anonymous 4/13/2021 04:10'!topics: topicsNames	^self model findTopics: (((topicsNames asUppercase)trim) findTokens: ',')! !!NewQuestionComponent methodsFor: 'private' stamp: 'Anonymous 4/15/2021 20:32'!renderContentOn: aCanvas	self renderHeaderOn: aCanvas.	self renderBackButtonOn: aCanvas.	aCanvas div style: 'text-align: center'; with: [		aCanvas heading level1 with: 'Nueva pregunta'.		].	aCanvas div class: 'wrapper'; with: [		aCanvas div class: 'new-question-form'; with: [ 			aCanvas form: [ 				self renderInputElementsOn: aCanvas.				self renderButtonsOn: aCanvas			].		].	].! !!NewQuestionComponent methodsFor: 'private'!nqTitle	^ nqTitle! !!NewQuestionComponent methodsFor: 'private'!nqText	^ nqText! !!NewQuestionComponent methodsFor: 'private'!nqTopics: anObject	nqTopics := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NewQuestionComponent class	instanceVariableNames: ''!!NewQuestionComponent class methodsFor: 'accessing' stamp: 'Anonymous 4/15/2021 20:31'!parent: aParent	self initialize.	^ (self new parent: aParent).! !WAComponent subclass: #PostComponent	instanceVariableNames: 'post qualification parent canRemove'	classVariableNames: ''	package: 'CuOOra-ui'!!PostComponent methodsFor: 'private' stamp: 'Anonymous 4/12/2021 20:22'!updateRoot: anHtmlRoot	super updateRoot: anHtmlRoot.   anHtmlRoot stylesheet url: (MyFileLibrary urlOf: #stylesCss).! !!PostComponent methodsFor: 'instance creation' stamp: 'Anonymous 4/13/2021 03:42'!post: aPost parent: aParent canRemove: aCondition	post := aPost.	parent := aParent.	canRemove := aCondition.	qualification := post isQualifiedBy: self session user.! !!PostComponent methodsFor: 'protected' stamp: 'Anonymous 4/11/2021 02:08'!addDislike	qualification isNotNil 		ifTrue: [ 			"EXISTE CALIFICACION DEL USUARIO"			qualification condition				ifFalse: [ 					"HAY UN DISLIKE, QUITO LA CALIFICACION"					post removeQualification: qualification.				]				ifTrue: [ 					"HAY UN LIKE, CAMBIO LA CONDICION"					qualification toggleCondition.				]		 ]		ifFalse: [ 			"NO EXISTE CALIFICACION DEL USUARIO"			post addQualification: (Qualification newWithCondition: false author: self session user).		].! !!PostComponent methodsFor: 'protected' stamp: 'Anonymous 4/11/2021 02:13'!renderQualificationsOn: aCanvas	aCanvas span: post getLikes asString , ' likes | ' , post getDislikes asString , ' dislikes'.! !!PostComponent methodsFor: 'protected' stamp: 'Anonymous 4/13/2021 03:55'!renderRemoveButtonOn: aCanvas	(post author = self session user)		ifFalse: [ ^ self ].	aCanvas anchor class: 'btn-remove-post';		callback: [ self remove ];		with: 'X'.! !!PostComponent methodsFor: 'protected' stamp: 'Anonymous 4/15/2021 20:40'!renderUserProfileComponent	parent call: (UserProfileComponent user: post author parent: parent).! !!PostComponent methodsFor: 'protected' stamp: 'Anonymous 4/11/2021 02:12'!renderContentOn: aCanvas	^ self subclassResponsibility.! !!PostComponent methodsFor: 'protected' stamp: 'Anonymous 4/14/2021 06:45'!renderQualificationButtonsOn: aCanvas	aCanvas		div: [			aCanvas anchor				callback: [ self addLike ];				with: [ aCanvas button class: 'btn-lk-dlk'; with: 'Like' ].			aCanvas anchor				callback: [ self addDislike ];				with: [ aCanvas button class: 'btn-lk-dlk'; with: 'Dislike' ] 		] ! !!PostComponent methodsFor: 'protected' stamp: 'Anonymous 4/13/2021 04:01'!remove	(post author = self session user)		ifFalse: [ ^ self ].	post remove.	self renderUserProfileComponent.! !!PostComponent methodsFor: 'protected' stamp: 'Anonymous 4/11/2021 02:19'!renderAuthorOn: aCanvas	^ self subclassResponsibility.! !!PostComponent methodsFor: 'protected' stamp: 'Anonymous 4/11/2021 02:09'!addLike	qualification isNotNil 		ifTrue: [ 			"EXISTE CALIFICACION DEL USUARIO"			qualification condition				ifTrue: [ 					"HAY UN LIKE, QUITO LA CALIFICACION"					post removeQualification: qualification.				]				ifFalse: [ 					"HAY UN DISLIKE, CAMBIO LA CONDICION"					qualification toggleCondition.				]		]		ifFalse: [ 			"NO EXISTE CALIFICACION DEL USUARIO"			post addQualification: (Qualification newWithCondition: true author: self session user).		].! !PostComponent subclass: #AnswerComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-ui'!!AnswerComponent methodsFor: 'private' stamp: 'Anonymous 4/12/2021 00:56'!renderAuthorOn: aCanvas	aCanvas 		div: [			aCanvas span: 'Respuesta de '. 			aCanvas anchor				callback: [ self renderUserProfileComponent ];				with: ( post author username ).		]			! !!AnswerComponent methodsFor: 'private' stamp: 'Anonymous 4/13/2021 03:56'!renderContentOn: aCanvas	aCanvas div class: 'post-container'; style: 'margin-left: 40px; background-color: rgba(217, 0, 36, 0.8)'; with: [		canRemove		ifTrue: [ self renderRemoveButtonOn: aCanvas. ].		self renderAuthorOn: aCanvas.		self renderTextOn: aCanvas.		self renderQualificationsOn: aCanvas.		self renderQualificationButtonsOn: aCanvas.	].! !!AnswerComponent methodsFor: 'private' stamp: 'Anonymous 4/11/2021 05:12'!renderTextOn: aCanvas	aCanvas div: [ 		aCanvas span: (post text).	]	! !!AnswerComponent methodsFor: 'instance creation' stamp: 'Anonymous 4/13/2021 03:45'!answer: anAnswer parent: aParent canRemove: aCondition	self post: anAnswer parent: aParent canRemove: aCondition.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AnswerComponent class	instanceVariableNames: ''!!AnswerComponent class methodsFor: 'instance creation' stamp: 'Anonymous 4/13/2021 03:48'!answer: anAnswer parent: aParent canRemove: aCondition	^ ( self new answer: anAnswer parent: aParent canRemove: aCondition ).! !PostComponent subclass: #QuestionComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'CuOOra-ui'!!QuestionComponent methodsFor: 'private' stamp: 'Anonymous 4/11/2021 20:19'!renderTitleOn: aCanvas	aCanvas anchor		callback: [ self renderQuestionDetailsComponent ];		with: [ aCanvas heading level3 with: post title ].				! !!QuestionComponent methodsFor: 'private' stamp: 'Anonymous 4/15/2021 20:28'!renderQuestionDetailsComponent	parent call: (QuestionDetailsComponent question: post parent: parent).! !!QuestionComponent methodsFor: 'private' stamp: 'Anonymous 4/13/2021 03:55'!renderContentOn: aCanvas	aCanvas div class: 'post-container'; with: [		canRemove			ifTrue: [ self renderRemoveButtonOn: aCanvas. ].		self renderTitleOn: aCanvas.		self renderTopicsOn: aCanvas.		self renderAuthorOn: aCanvas.		self renderQualificationsOn: aCanvas.		self renderQualificationButtonsOn: aCanvas.	].	! !!QuestionComponent methodsFor: 'private' stamp: 'Anonymous 4/12/2021 05:07'!renderTopicsOn: aCanvas	aCanvas div: [ 			aCanvas span with: 'Topicos: ' , (', ' join: (post topics collect: [ :t | t name ])).	]! !!QuestionComponent methodsFor: 'private' stamp: 'Anonymous 4/11/2021 23:59'!renderAuthorOn: aCanvas	aCanvas 		div: [			aCanvas span: 'Realizada por '. 			aCanvas anchor				callback: [ self renderUserProfileComponent ];				with: ( post author username ).			aCanvas span:  ( ' | ' , post answers size asString, ' respuestas' ).		]			! !!QuestionComponent methodsFor: 'instance creation' stamp: 'Anonymous 4/13/2021 03:46'!question: aQuestion parent: aParent canRemove: aCondition	self post: aQuestion parent: aParent canRemove: aCondition.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!QuestionComponent class	instanceVariableNames: ''!!QuestionComponent class methodsFor: 'instance creation' stamp: 'Anonymous 4/13/2021 03:44'!question: aQuestion parent: aParent canRemove: aCondition	^ (self new			question: aQuestion			parent: aParent			canRemove: aCondition;			yourself).! !ComponentWithHeaderAndBack subclass: #QuestionDetailsComponent	instanceVariableNames: 'question'	classVariableNames: ''	package: 'CuOOra-ui'!!QuestionDetailsComponent methodsFor: 'private' stamp: 'Anonymous 4/14/2021 06:18'!renderAnswersOn: aCanvas	aCanvas div: [		aCanvas horizontalRule.		question answers 			do: [ :an | 				aCanvas render: (AnswerComponent answer: an parent: self canRemove: true).				aCanvas horizontalRule.			].		aCanvas div style: 'text-align: center'; with: [ 			aCanvas span style: 'color: #fff'; with: 'No hay más respuestas.'.		].		self renderNewAnswerButtonOn: aCanvas.	]		! !!QuestionDetailsComponent methodsFor: 'private' stamp: 'Anonymous 4/15/2021 21:03'!renderContentOn: aCanvas	self renderHeaderOn: aCanvas.	self renderBackButtonOn: aCanvas.	aCanvas render: (QuestionComponent question: question parent: self canRemove: false).	self renderAnswersOn: aCanvas.! !!QuestionDetailsComponent methodsFor: 'private' stamp: 'Anonymous 4/14/2021 09:46'!renderNewAnswerButtonOn: aCanvas	aCanvas anchor class: 'btn-new-post'; style: 'text-decoration: none';		callback: [ self renderNewAnswerComponent ];		with: '+'.		! !!QuestionDetailsComponent methodsFor: 'private' stamp: 'Anonymous 4/15/2021 20:20'!renderNewAnswerComponent	self call: (NewAnswerComponent question: question parent: self).! !!QuestionDetailsComponent methodsFor: 'instance creation' stamp: 'Anonymous 4/15/2021 20:26'!question: aQuestion parent: aParent	self parent: aParent.	question := aQuestion.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!QuestionDetailsComponent class	instanceVariableNames: ''!!QuestionDetailsComponent class methodsFor: 'services' stamp: 'Anonymous 4/15/2021 20:50'!question: aQuestion parent: aParent	self initialize.	^ (self new question: aQuestion parent: aParent).! !WASession subclass: #SessionWithUser	instanceVariableNames: 'user'	classVariableNames: ''	package: 'CuOOra-ui'!!SessionWithUser methodsFor: 'accessing' stamp: 'Anonymous 4/14/2021 10:06'!logout	user := nil.   self unregistered.	self requestContext redirectTo: 'http://localhost:8080/cuoora'.! !!SessionWithUser methodsFor: 'accessing'!user: anObject	user := anObject! !!SessionWithUser methodsFor: 'accessing'!user	^ user! !ComponentWithHeaderAndBack subclass: #UserProfileComponent	instanceVariableNames: 'user'	classVariableNames: ''	package: 'CuOOra-ui'!!UserProfileComponent methodsFor: 'instance creation' stamp: 'Anonymous 4/15/2021 19:59'!user: anUser parent: aParent	self parent: aParent.	user := anUser.! !!UserProfileComponent methodsFor: 'private' stamp: 'Anonymous 4/14/2021 06:41'!renderFollowButtonOn: aCanvas	(user = self session user)		ifTrue: [ ^ self ].	(self session user followingAt: user)		ifTrue: [			aCanvas anchor class: 'btn-follow-unfollow'; style: 'background-color: #dc3545';				callback: [ self unfollowUser ];				with: 'unfollow'.		]		ifFalse: [ 			aCanvas anchor class: 'btn-follow-unfollow'; style: 'background-color: #007bff';				callback: [ self followUser ];				with: 'follow'.		].! !!UserProfileComponent methodsFor: 'private' stamp: 'Anonymous 4/15/2021 20:29'!renderContentOn: aCanvas	self renderHeaderOn: aCanvas.	self renderBackButtonOn: aCanvas.	aCanvas div class: 'body-container'; with: [		aCanvas heading level1 with: 'Preguntas de ', user username.		self renderFollowButtonOn: aCanvas.		aCanvas div class: 'posts-container'; with: [ 			self renderQuestions: aCanvas.		]	].! !!UserProfileComponent methodsFor: 'private' stamp: 'Anonymous 4/11/2021 23:53'!unfollowUser	self session user unfollow: user.! !!UserProfileComponent methodsFor: 'private' stamp: 'Anonymous 4/11/2021 23:49'!followUser	self session user follow: user.! !!UserProfileComponent methodsFor: 'private' stamp: 'Anonymous 4/13/2021 03:42'!renderQuestions: aCanvas	user questions do: [ :q | aCanvas render: (QuestionComponent question: q parent: self canRemove: true) ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UserProfileComponent class	instanceVariableNames: ''!!UserProfileComponent class methodsFor: 'accessing' stamp: 'Anonymous 4/15/2021 20:00'!user: anUser parent: aParent	self initialize.	^ ( self new user: anUser parent: aParent).! !